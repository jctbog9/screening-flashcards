module Week3
  @week3 = [
    { question: 'Explain how prototypical inheritance works', answer: 'All JavaScript objects have a prototype property that is a reference to another object. When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object\'s prototype, and the prototype\'s prototype and so on, until it finds the property defined on one of the prototypes or until it reaches the end of the prototype chain. This behavior simulates classical inheritance, but it is really more of delegation than inheritance.' },
    { question: 'What is the difference between class based inheritance and prototypical inheritance?', answer: 'In JavaScript, there are no classes, while in Ruby there are. In JavaScript, there technically are no classes. The class syntax introduced in ES6 is just a constructor function that returns a JavaScript object.' },
    { question: 'What are props in React?', answer: 'Most components can be customized when they are created, with different parameters. These creation parameters are called props.' },
    { question: 'What is a React component?', answer: 'Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.' },
    { question: 'What is a controlled component in React?', answer: 'A controlled component is a form element whose value is tied to state that is held in a parent component. The state is then generally changed based on user input, such that the source of truth is always based on the React component\'s state.' },
    { question: 'Explain hoisting in JavaScript', answer: 'Hoisting is a term used to explain the behavior of variable declarations in your code. Variables declared or initialized with the var keyword will have their declaration "hoisted" up to the top of the current scope. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is.' },
    { question: 'In JavaScript, what is a constructor?', answer: 'The constructor method is a special method for creating and initializing an object within a class. We can call super to retrieve properties of a parent class via that parent\'s constructor.' },
    { question: 'In JavaScript, what is a pure function?', answer: 'A function is pure if, given the same input, will always return the same output; and if the function produces no side effects e.g. does not change the state of a variable outside of its own lexical scope.' },
    { question: 'Can you describe the main difference between a .forEach loop and a .map() loop and why you would pick one versus the other?', answer: 'The main difference between .forEach and .map() is that .map() returns a new array and .forEach iterates through the elements in an array, executes a callback for each element and does not return a value.' },
    { question: 'What is the DOM?', answer: 'The Document Object Model (DOM) is a programming interface for HTML and XML documents. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.' },
    { question: 'What are event handlers?', answer: 'Event handlers make it possible to detect and react to events happening in our web page. When a user interacts with our DOM, either by clicking, hovering, changing, etc, it returns an event object. An event handler can be assigned to a specific DOM node that we predict a user will interact with such that upon an event being returned, we can return a callback function that gets executed.' },
    { question: 'What is the difference between == and === in Javascript?', answer: '== is the abstract equality operator while === is the strict equality operator. The == operator will compare for equality after doing any necessary type conversions. The === operator will not do type conversion, so if two values are not the exact same type, === will simply return false.' },
    { question: 'What is the difference between a variable that is null, undefined and undeclared?', answer: 'Undeclared variables are created when you assign a value to an identifier that is not previously created. Undeclared variables will be defined globally, outside of the current scope.' },
    { question: 'What are the differences between variables created using let, var or const?', answer: 'Variables declared using the var keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. let and const are block scoped, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).' },
    { question: 'What does it mean in JS that a function is a first class object?', answer: 'This means that javascript functions are just a type of object that can do all the things that regular objects can do. They can be stored as a variable, have methods defined on them, they can hold properties of their own, and they can even be returned by other functions.' },
    { question: 'What does .bind do in JavaScript?', answer: 'The .bind() method creates a new function that, when called, has its "this" keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.' },
    { question: 'Explain fetch in as much detail as possible', answer: 'With fetch, web applications can send data to, and retrieve data from, a server asynchronously without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, fetch allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page. In practice, fetch generally returns JSON since it is native to JS. The Fetch API also has the added benefit of being able to return a Promise, which allows for better error handling and callback chaining' }
  ]

  def self.flashcards
    @week3
  end

end
