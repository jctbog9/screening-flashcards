module All
  @all = [
    { question: 'What is an API?', answer: 'API is an Application Programming Interface. It is a software intermediary that allows two applications to talk to each other' },
    { question: 'What are the three key components of a user story?', answer: 'We use user stories to succinctly define a feature that delivers business value to an end user. A good user story identifies: The specific role of the user we are trying to serve (As a...) What that role wants to do in the context of the application (I want to...) Why that role wants to work with that functionality (So that...)' },
    { question: 'What is Acceptance Testing? How is it different from Unit Testing?', answer: 'While unit testing is low level and often performed for the benefit of the development team, acceptance tests are written with the user in mind.' },
    { question: 'How does capybara help us to perform acceptance testing?', answer: 'Capybara is a ruby gem that works with RSpec and other ruby testing libraries. It provides us with methods like fill_in and click so that we can impersonate an end user. Tools like capybara-webkit and poltergeist can assist with testing JavaScript.' },
    { question: 'Explain what a Promise is in JS', answer: 'Promises provide an API that allows us to execute asynchronous code, and then handle the success or failure of that code. A promise is an object that may produce a single value sometime in the future: either a resolved value or a reason that it\'s not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Routines handling a promise can attach callbacks to handle the fulfilled value or the reason for rejection.' },
    { question: 'Explain the difference between synchronous and asynchronous functions.', answer: 'Synchronous functions are blocking while asynchronous functions are not. In synchronous functions, statements complete before the next statement is run. Asynchronous functions usually accept a callback as a parameter and execution continues on the next line immediately after the asynchronous function is invoked. The callback is only invoked when the asynchronous operation is complete.' },
    { question: 'What are the key elements or components of an HTTP request?', answer: 'An HTTP has two main components: the header and the request body. In the case of a request that results from a form submission, the body may contain parameters that will inform the server with user supplied data. The header contains important information about the request.' },
    { question: 'Walk me through how an HTTP request is served.', answer: 'In an HTTP interaction, there is a client and a server. An HTTP request is initiated by the client. The client sends the server important information like the path being requested, the HTTP method, and the Content-Type being requested. If the server is found and it is available, it responds to the client in the form of an HTTP response. The response includes the body of the requested document, the status code that provides a hint to the client around how the server processed the request, and the Content-Type of the body.' },
    { question: 'Why is it better to direct web traffic over HTTPS as opposed to plain HTTP?', answer: 'HTTP traffic is transmitted over plain text. Anyone listening in on the network conversation can gain access to secure data like passwords and credit card numbers. HTTPS traffic is encrypted, so anyone listening in would need a very complex encryption key to decipher who is saying what.' },
    { question: 'In the context of HTTP, what is a query string and how is it used?', answer: 'Query strings are URI encoded strings that often appear at the end of a URL. They start after the ? in an HTTP request. We often use a query string to qualify a GET request with more information.' },
    { question: 'What does it mean when we say HTTP is stateless? What are the benefits and drawbacks of having a stateless protocol?', answer: 'A stateless protocol does not require the server to retain information or status about each user for the duration of multiple requests. This simplifies the contract between client and server, and in many cases minimizes the amount of data that needs to be transferred.' },    { question: 'Explain how prototypical inheritance works', answer: 'All JavaScript objects have a prototype property that is a reference to another object. When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object\'s prototype, and the prototype\'s prototype and so on, until it finds the property defined on one of the prototypes or until it reaches the end of the prototype chain. This behavior simulates classical inheritance, but it is really more of delegation than inheritance.' },
    { question: 'What is the difference between class based inheritance and prototypical inheritance?', answer: 'In JavaScript, there are no classes, while in Ruby there are. In JavaScript, there technically are no classes. The class syntax introduced in ES6 is just a constructor function that returns a JavaScript object.' },
    { question: 'What are props in React?', answer: 'Most components can be customized when they are created, with different parameters. These creation parameters are called props.' },
    { question: 'What is a React component?', answer: 'Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.' },
    { question: 'What is a controlled component in React?', answer: 'A controlled component is a form element whose value is tied to state that is held in a parent component. The state is then generally changed based on user input, such that the source of truth is always based on the React component\'s state.' },
    { question: 'Explain hoisting in JavaScript', answer: 'Hoisting is a term used to explain the behavior of variable declarations in your code. Variables declared or initialized with the var keyword will have their declaration "hoisted" up to the top of the current scope. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is.' },
    { question: 'In JavaScript, what is a constructor?', answer: 'The constructor method is a special method for creating and initializing an object within a class. We can call super to retrieve properties of a parent class via that parent\'s constructor.' },
    { question: 'In JavaScript, what is a pure function?', answer: 'A function is pure if, given the same input, will always return the same output; and if the function produces no side effects e.g. does not change the state of a variable outside of its own lexical scope.' },
    { question: 'Can you describe the main difference between a .forEach loop and a .map() loop and why you would pick one versus the other?', answer: 'The main difference between .forEach and .map() is that .map() returns a new array and .forEach iterates through the elements in an array, executes a callback for each element and does not return a value.' },
    { question: 'What is the DOM?', answer: 'The Document Object Model (DOM) is a programming interface for HTML and XML documents. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.' },
    { question: 'What are event handlers?', answer: 'Event handlers make it possible to detect and react to events happening in our web page. When a user interacts with our DOM, either by clicking, hovering, changing, etc, it returns an event object. An event handler can be assigned to a specific DOM node that we predict a user will interact with such that upon an event being returned, we can return a callback function that gets executed.' },
    { question: 'What is the difference between == and === in Javascript?', answer: '== is the abstract equality operator while === is the strict equality operator. The == operator will compare for equality after doing any necessary type conversions. The === operator will not do type conversion, so if two values are not the exact same type, === will simply return false.' },
    { question: 'What is the difference between a variable that is null, undefined and undeclared?', answer: 'Undeclared variables are created when you assign a value to an identifier that is not previously created. Undeclared variables will be defined globally, outside of the current scope.' },
    { question: 'What are the differences between variables created using let, var or const?', answer: 'Variables declared using the var keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. let and const are block scoped, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).' },
    { question: 'What does it mean in JS that a function is a first class object?', answer: 'This means that javascript functions are just a type of object that can do all the things that regular objects can do. They can be stored as a variable, have methods defined on them, they can hold properties of their own, and they can even be returned by other functions.' },
    { question: 'What does .bind do in JavaScript?', answer: 'The .bind() method creates a new function that, when called, has its "this" keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.' },
    { question: 'Explain fetch in as much detail as possible', answer: 'With fetch, web applications can send data to, and retrieve data from, a server asynchronously without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, fetch allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page. In practice, fetch generally returns JSON since it is native to JS. The Fetch API also has the added benefit of being able to return a Promise, which allows for better error handling and callback chaining' },
    { question: 'When I say that React implements unidirectional data flow, what does that mean?', answer: 'Unidirectional Data Flow means that information flows through our components in a single direction. As we nest components, we pass state from higher order components down as props in lower order components. Lower order components cannot pass data "up" to higher order components.' },
    { question: 'What is React Router and what does it do for us?', answer: 'React Router provides us with the ability to map paths to React components. We can use wildcard paths and contextualize our paths with parameters, which helps with reusability.' },
    { question: 'Why do I have to use the <Link> component when using react-router?', answer: 'The default <a> tag with an href attribute will issue an HTTP GET request forcing a reload of the page. By using the <Link> component provided by the react-router library, we override the default behavior of the <a> tag so that a GET request is not acxtually issued, and instead functionality of the react-router system can be used to move from one component to another.' },
    { question: 'How does the browser\'s back button work on React Router-enabled web applications?', answer: 'If the browserHistory API is properly configured then as the user navigates from path to path, react-router will use that browserHistory API to add URL\'s to the browser\'s history. The Back button in the browser will reference that browser history, so it will look back to the last path that was added to the stack of URL\'s in the history object.' },
    { question: 'When does componentDidMount get called in the React Lifecycle?', answer: 'When the entire component is added or mounted to the Document Object Model (DOM).' },
    { question: 'Why do we use componentDidMount for retrieving data?', answer: ' componentDidMount happens immediately after the first render() invocation, so we can use that to use activity indicators like AJAX spinners to users to visually indicate that we are retrieving data. We can also make safe calls to setState here, which we often want to do in handling the successful receipt of fetch requests.' },
    { question: 'What is Enzyme and why do you use it?', answer: 'Written by the AirBnB engineering team, Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse a React Components\' output.' },
    { question: 'What is Jasmine and what role does it play in automated testing?', answer: 'Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. We can run Jasmine in the browser, or we can use a node runner to run it on the client side.' },
    { question: 'What is Karma and what role does it play in automated testing?', answer: 'Karma is a runner we use to execute our automated tests.' },
    { question: 'What is PhantomJS and what role does it play in automated testing?', answer: 'PhantomJS is a headless web browser that allows us to emulate the Document Object Model of a webpage on the command line.' },
    { question: 'Why can\'t we just test our React apps with capybara?', answer: 'Out of the gates, capybara does not execute JavaScript when running acceptance tests. We must configure it to do so with an adapter like capybara-webkit or poltergeist.' },
    { question: 'Why do we need databases for our web applications?', answer: 'Because files are inefficient at handling large amounts of data and databases solve a lot of the data organization problems that you\'d otherwise have to write code for.' },
    { question: 'What is a primary key? Why is it important?', answer: 'An attribute or set of attributes that uniquely identifies a row in a table.' },
    { question: 'What is a foreign key? Why is it important?', answer: 'An attribute or set of attributes that identifies a row in another table.' },
    { question: 'What is a SQL join?', answer: 'A SQL join is an instruction to combine data from two tables, and often help us keep our database normalized.' },
    { question: 'What is an index? When would we use one?', answer: 'An index is used to speed up searching in the database. While it affords us considerable read time performance, it is at the expense of significant write time performance. Indexes in a database are analogous to indexes that you find in a book. If a book has an index, and I ask you to find a chapter in that book, you can quickly find that with the help of the index.' },
    { question: 'What object oriented technique does ActiveRecord implement?', answer: 'ActiveRecord implements the Object Relational Mapping (ORM) technique. We use this pattern to represent database records as instances of objects in our applications.' },
    { question: 'What does GIGO stand for? What are its implications for web development?', answer: 'GIGO stands for Garbage-In, Garbage-Out. Basically it\'s a premise in database design that if you take in bad data, it will result in bad output.' },
    { question: 'What does it mean that Postgres supports transactional SQL?', answer: 'With transactional SQL, we can "bundle" a series of commands into a unit of work. These commands are grouped together so that if one fails, we can rollback all of the SQL that ran previously.' },
    { question: 'What two validations can I control for at the schema level? Why should I validate at the schema level?', answer: 'At the schema level, I can enforce a null constraint when defining a column, and I can enforce a uniqueness constraint by way of an index. Adding these protections at the database level ensures that if someone circumvents the logic of my application, the integrity of my data is still somewhat protected.' },
    { question: 'Explain what the MVC design pattern is.', answer: 'MVC is a software design pattern that separates application the application into three parts: the model, the view, and the controller.' },
    { question: 'Walk me through how Rails processes an HTTP request', answer: 'Once the client resolves the IP address and issues the request, it received via the server. Rails will first look at the routes, and determine based on the HTTP method and path, whether there is a correlating controller action to direct to. The controller will then presumably do something meaningful with models, including the creation of instance variables that will inform the view. The controller will then construct the HTTP response and send that in response to the client.' },
    { question: 'What is a Rails resource?', answer: 'A Rails resource is a controller that implements 7 CRUD/RESTful concepts: show, index, new, create, edit, update, and destroy.' },
    { question: 'How do we compare and contrast Sinatra vs. Ruby on Rails?', answer: 'Sinatra often involves one main file, which serves as both the routing mechanism and the controller mechanism of the backend. Rails, on the other hand, separates these concerns so that there is a distinct routing file that points to a system of controllers found in app/controllers.' },
    { question: 'Why do we nest resources', answer: 'Often, we need to contextualize a "child" resource with its parent. For example, if we were building a blogging system, we may have a data model where an Article has_many Comments. We may nest a comments resource so that it is easy to create, retrieve, update, and delete comments that are associated with that article.' },
    { question: 'How is controller/functional testing different from unit testing and feature testing?', answer: 'Functional testing integrates many concerns, mainly around the HTTP request, which makes it difficult to test the controller in isolation. A feature test does not impersonate what a user does in the system, so it is not a true feature test.' },
    { question: 'What is a serializer, and why should I use one?', answer: 'We use a serializer as part of serving Application Programming Interfaces (API\'s). With a serializer, we can build in rules that define what attributes are exposed in our API. We can also add behaviors to our serializers to provide additional information that may be exclusively pertinent to the context of the API.' },
    { question: 'What role does Sprockets play in the Rails ecosystem?', answer: 'Sprockets is the main library behind Rails\' asset pipeline. It handles the management of static assets in a Rails Application. When we deploy to production, sprockets handles the process of concatenating and minifying all of our assets to optimize response times. It also uses a hexdigest to "cache bust", so that when we push new versions of assets, browsers don\'t unexpectedly cache and use older versions.' },
    { question: 'Why must we use webpacker in our Rails applications?', answer: 'Webpacker is a ruby gem that enables us to use webpack in the context of our Rails application. In order to make the most use of tools like Babel and ES6, it\'s easiest to manage all of our JavaScript in a webpack envirionment.' },
    { question: 'What is a PORO?', answer: 'PORO is an acronymn for "Plain Old Ruby Object".' },
    { question: 'When I say "skinny controller, fat model" what does that mean to you?', answer: 'In complex Rails applications, it\'s somewhat easy for controllers to end up implementing a lot of business logic. Because Rails controllers are difficult to unit test, we should work to extract that logic as much as possible to models. We can leverage service objects, or PORO\'s, to help this cause.' }
  ]

  def self.flashcards
    @all
  end

end
